<!DOCTYPE html>
<html>
<head>
  <title><%= conf[:title] %></title>
  <%= stylesheet_link_tag "#{conf[:stylesheet]}-edit", media: 'all' %>
  <%= stylesheet_link_tag 'sibu/sibu', media: 'all' %>
  <%= javascript_include_tag "#{conf[:javascript]}-edit" %>
  <%= javascript_include_tag 'sibu/sibu' %>
  <% if @site %>
    <%= stylesheet_link_tag @site.site_template.path, media: "all" %>
    <%= javascript_include_tag "#{@site.site_template.path}-core" %>
  <% end %>
  <%= csrf_meta_tags %>
</head>
<body>
<% [:top_panel, :side_panel, :content_panel, :bottom_panel].each do |panel| %>
  <% unless conf[panel].blank? %>
    <div class="<%= panel == :content_panel ? 'sibu_content_panel' : 'sibu_panel' %>">
      <%= render conf[panel] %>
      <% if panel == :content_panel %>
        <div id="edit_panel" class="sibu_panel sibu_view"></div>
        <div id="edit_mode_overlay" class="sibu_panel sibu_view">
          <div class="overlay_top"></div>
          <div class="overlay_right"></div>
          <div class="overlay_left"></div>
          <div class="overlay_bottom"></div>
          <div class="edit_mode_actions">
            <p>Modifier la section</p>
            <button onclick="cancelEditMode()">Fermer</button>
          </div>
        </div>
      <% end %>
    </div>
  <% end %>
<% end %>
<script>
    const TEXT_TAGS = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'span'];
    const IMG_TAGS = ['img'];
    const LINK_TAGS = ['a'];

    $(function () {
        initOverlays();
    });

    function setEditMode(elt) {
        var offset = elt.offset();
        var width = elt.width(), height = elt.height();
        var overlay = $("#edit_mode_overlay");
        var yPosition = offset.top - $(".sibu_content_panel").offset().top;
        overlay.find(".overlay_top").css("height", yPosition);
        overlay.find(".overlay_bottom").css("top", yPosition + height);
        overlay.find(".overlay_left").css({"height": height, "width": offset.left, "top": yPosition});
        overlay.find(".overlay_right").css({"height": height, "left": offset.left + width, "top": yPosition});
        overlay.find(".edit_mode_actions").css({"top": (yPosition <= 40 ? (yPosition + height) : (yPosition - 40)), left: offset.left, width: width});
        overlay.show();
        window.scrollTo(0, yPosition);
        initInnerOverlays(elt);
        elt.remove();
    }

    function cancelEditMode() {
        $("#edit_mode_overlay").hide();
        cancelEdit();
        initOverlays();
    }

    function cancelEdit() {
        $("#edit_panel").slideUp("fast");
    }

    function editContent(eltId, sectionId, entity, contentType) {
        $.ajax({
            url: "<%= edit_element_site_page_path(@site.id, @page.id) %>",
            method: "GET",
            data: {
                element_id: eltId,
                section_id: sectionId,
                entity: entity,
                content_type: contentType
            }
        })
    }

    function initInnerOverlays(elt) {
        var editables = elt.parents("sb-edit").first().find("[class*='sb-']");
        editables.off();
        editables.hover(function() {
            $(this).addClass("sb-editable");
        }, function() {
            $(this).removeClass("sb-editable");
        });
        editables.click(function(evt) {
            evt.preventDefault();
            var elt = $(this), tag = elt.prop("tagName").toLowerCase();
            var section = elt.parents("sb-edit").first();
            var eltId = elt.data("id"), sectionId = section.data("id"), entity = section.data("entity");
            if (TEXT_TAGS.indexOf(tag) !== -1) {
                editContent(eltId, sectionId, entity, 'text');
            } else if (IMG_TAGS.indexOf(tag) !== -1 || elt.hasClass('sb-img')) {
                editContent(eltId, sectionId, entity, 'media');
            } else if (LINK_TAGS.indexOf(tag) !== -1) {
                editContent(eltId, sectionId, entity, 'link');
            } else {
                console.log('Sibu - Unsupported tag type : ' + tag);
            }
        })
    }

    function initOverlays() {
        $("div.sb-overlay").remove();
        $("sb-edit").each(function() {
            var elt = $(this);
            elt.prepend("<div class='sb-overlay'><a>Modifier</a></div>");
            var overlay = elt.find(".sb-overlay");
            var dimensions = overlayDimensions(overlay, elt);
            overlay.width(dimensions.width);
            overlay.height(dimensions.height);

            elt.hover(function() {
                overlay.css("opacity", 1);
            }, function() {
                overlay.css("opacity", 0);
            });

            overlay.click(function() {
                setEditMode($(this));
            })
        });
    }

    function overlayDimensions(overlay, element) {
        var children = element.find("> *:not(.sb-overlay)");
        var width = - +children.first().css("margin-left").replace("px", ""), height = - +children.first().css("margin-top").replace("px", "");
        var maxWidth = element.parent().outerWidth(true), maxHeight = element.parent().outerHeight(true);
        element.find("> *:not(.sb-overlay)").each(function() {
            width = width + $(this).outerWidth(true);
            height = height + $(this).outerHeight(true);
        });
        return {width: Math.min(width, maxWidth), height: Math.min(height, maxHeight)};
    }
</script>
<%= yield :scripts %>
</body>
</html>
