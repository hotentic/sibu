<!DOCTYPE html>
<html>
<head>
  <title><%= conf[:title] %></title>
  <%= stylesheet_link_tag 'sibu/sibu', media: 'all' %>
  <%= stylesheet_link_tag conf[:stylesheet], media: 'all' %>
  <%= javascript_include_tag 'sibu/sibu' %>
  <%= javascript_include_tag "#{conf[:javascript]}-edit" %>
  <% if @site %>
    <%= stylesheet_link_tag (conf[:custom_styles] ? @site.style_url : @site.site_template.path), media: "all" %>
    <%= javascript_include_tag @site.site_template.path %>
  <% end %>
  <%= csrf_meta_tags %>
  <%= yield :styles %>
</head>
<body>
<% [:top_panel, :side_panel, :content_panel, :bottom_panel].each do |panel| %>
  <% unless conf[panel].blank? %>
    <div class="<%= panel == :content_panel ? 'sibu_content_panel' : 'sibu_panel' %>">
      <%= render conf[panel] %>
      <% if panel == :content_panel %>
        <div id="edit_panel" class="sibu_panel sibu_view"></div>
        <div id="sections_panel"></div>
        <div id="edit_mode_overlay" class="sibu_panel sibu_view">
          <div class="overlay_top"></div>
          <div class="overlay_right"></div>
          <div class="overlay_left"></div>
          <div class="overlay_bottom"></div>
          <div class="edit_mode_actions">
            <p id="edit_section_msg">Modifier la section</p>
            <% if conf[:section_form] %>
              <button id="edit_section" onclick="editSection()">Configurer</button>
            <% end %>
            <button id="new_section_before" onclick="newSection(false)">Insérer un bloc avant</button>
            <button id="new_section_after" onclick="newSection(true)">Insérer un bloc après</button>
            <button id="delete_section" onclick="deleteSection()">Supprimer</button>
            <button onclick="cancelEditMode()">Fermer</button>
          </div>
        </div>
        <div id="edit_overlays"></div>
    <% end %>
    </div>
  <% end %>
<% end %>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        initOverlays();
        sibuCallback("editContent");
        <% unless @edit_section.blank? %>
          document.querySelector("[data-sb-overlay='<%= @edit_section %>']").click();
        <% end %>
    });

    function setEditMode(section, overlay, left, top, width, height) {
        var editMode = document.querySelector("#edit_mode_overlay");
        editMode.querySelector(".overlay_top").style.height = top + "px";
        editMode.querySelector(".overlay_bottom").style.top = top + height + "px";
        var leftOverlay = editMode.querySelector(".overlay_left"), rightOverlay = editMode.querySelector(".overlay_right"),
            editModeActions = editMode.querySelector(".edit_mode_actions");
        leftOverlay.style.height = height + "px";
        leftOverlay.style.width = left + "px";
        leftOverlay.style.top = top + "px";
        rightOverlay.style.height = height + "px";
        rightOverlay.style.left = left + width + "px";
        rightOverlay.style.top = top + "px";
        editModeActions.style.top = (top <= 120 ? (top + height) : (top - 40 - 20)) + "px";
        editModeActions.style.left = left + "px";
        editModeActions.style.width = width + "px";
        editMode.querySelector("#edit_section_msg").innerText = "Modifier la section";
        editMode.style.display = "block";
        if(section.getAttribute('data-sb-entity') === 'site') {
            editMode.querySelector("#new_section_before").style.display = "none";
            editMode.querySelector("#new_section_after").style.display = "none";
            editMode.querySelector("#delete_section").style.display = "none";
        } else {
            editMode.querySelector("#new_section_before").style.display = "block";
            editMode.querySelector("#new_section_after").style.display = "block";
            editMode.querySelector("#delete_section").style.display = "block";
        }
        window.scrollTo(0, top);
        section.classList.add('sb-editing');
        initInnerOverlays(section);
        document.querySelector("#edit_overlays").innerHTML = "";
    }

    function cancelEditMode() {
        refreshAfterEdit(false);
        document.querySelector("#edit_mode_overlay").style.display = "none";
        cancelEdit();
        document.querySelector(".sb-editing").classList.remove("sb-editing");
        initOverlays();
        if(typeof editCancelledCallback === "function") {
            editCancelledCallback();
        }
    }

    function newSection(isAfter) {
        var section = document.querySelector(".sb-editing");
        var sectionsPanel = document.querySelector("#sections_panel");
        sectionsPanel.innerHTML =
            '<div class="sibu_panel sibu_view"><h2>Choix du type de section</h2></div>' +
            '<div><div class="sibu_sections sibu_site_content" style="text-align: center;">Chargement en cours...</div></div>' +
            '<div class="sibu_panel sibu_view"><div class="sibu_actions"><a href="#" onclick="cancelSectionsEdit(); return false;">Annuler</a></div></div>';
        sectionsPanel.classList.add("active");
        sendXmlHttpRequest(
            "GET",
            "<%= new_section_site_page_path(@site.id, @page.id) %>",
            {
                section_id: section.getAttribute("data-sb-id"),
                entity: section.getAttribute("data-sb-entity"),
                after: isAfter
            }
        );
    }

    function editSection() {
        var section = document.querySelector(".sb-editing");
        sendXmlHttpRequest(
            "GET",
            "<%= edit_section_site_page_path(@site.id, @page.id) %>",
            {
                section_id: section.getAttribute("data-sb-id"),
                entity: section.getAttribute("data-sb-entity")
            }
        );
    }

    function deleteSection() {
        if (window.confirm("Supprimer la section ?")) {
            var section = document.querySelector(".sb-editing");
            sendXmlHttpRequest(
                "DELETE",
                "<%= delete_section_site_page_path(@site.id, @page.id) %>",
                {
                    section_id: section.getAttribute("data-sb-id"),
                    entity: section.getAttribute("data-sb-entity")
                }
            );
        }
    }

    function cloneElement(entity, sectionId, elementId) {
        if (window.confirm("Dupliquer l'élément ?")) {
            sendXmlHttpRequest(
                "POST",
                "<%= clone_element_site_page_path(@site.id, @page.id) %>",
                {
                    section_id: sectionId,
                    element_id: elementId,
                    entity: entity
                }
            );
        }
    }

    function deleteElement(entity, sectionId, elementId) {
        if (window.confirm("Supprimer l'élément ?")) {
            sendXmlHttpRequest(
                "DELETE",
                "<%= delete_element_site_page_path(@site.id, @page.id) %>",
                {
                    section_id: sectionId,
                    element_id: elementId,
                    entity: entity
                }
            );
        }
    }

    function addChildElement(entity, sectionId, elementId) {
        if (window.confirm("Ajouter un sous-menu ?")) {
            sendXmlHttpRequest(
                "POST",
                "<%= child_element_site_page_path(@site.id, @page.id) %>",
                {
                    section_id: sectionId,
                    element_id: elementId,
                    entity: entity
                }
            );
        }
    }

    function cancelEdit() {
        document.querySelector("#edit_panel").classList.remove("active");
        document.querySelector("#edit_panel").innerHTML = "";
        document.body.style.overflow = "initial";
    }

    function cancelSectionsEdit() {
        document.querySelector("#edit_panel").classList.remove("active");
        document.querySelector("#sections_panel").innerHTML = "";
        document.body.style.overflow = "initial";
    }

    function editContent(eltId, sectionId, entity, repeat, contentType, size, children) {
        sendXmlHttpRequest(
            "GET",
            "<%= edit_element_site_page_path(@site.id, @page.id, format: :js) %>",
            {
                element_id: eltId,
                section_id: sectionId,
                entity: entity,
                repeat: repeat,
                content_type: contentType,
                size: size,
                children: children
            }
        );
    }

    function initInnerOverlays(section) {
        var editables = section.querySelectorAll("[data-type]");
        for (var i = 0; i < editables.length; i++) {
            if (editables[i].getAttribute("data-type") !== 'group' || editables[i].getAttribute("data-repeat") !== 'false' || editables[i].getAttribute("data-children") !== 'false') {
                editables[i].addEventListener("mouseenter", function(evt) {
                    evt.stopPropagation();
                    evt.currentTarget.classList.add("sb-editable");
                });
                editables[i].addEventListener("mouseleave", function(evt) {
                    evt.currentTarget.classList.remove("sb-editable");
                });
                editables[i].addEventListener("click", function(evt) {
                    evt.stopPropagation();
                    evt.preventDefault();
                    var elt = evt.currentTarget, eltId = elt.getAttribute("data-id"), repeat = elt.getAttribute("data-repeat"),
                        type = elt.getAttribute("data-type"), size = elt.getAttribute("data-size"), children = elt.getAttribute("data-children");
                    var sectionId = section.getAttribute("data-sb-id"), entity = section.getAttribute("data-sb-entity");
                    editContent(eltId, sectionId, entity, repeat, type, size, children);
                });
            }
        }
    }

    function initOverlays() {
        var container = document.querySelector("#edit_overlays"), sections = document.querySelectorAll("[data-sb-id]");
        container.innerHTML = "";

        for (var i = 0; i < sections.length; i++) {
            var sectionBox = sections[i].getBoundingClientRect();
            var yOffset = sectionBox.top - document.querySelector(".sibu_content_panel").getBoundingClientRect().top;
            var width = sections[i].offsetWidth, height = (sections[i].offsetHeight === 0 ? childrenHeight(sections[i]) : sections[i].offsetHeight);
            var overlay = document.createElement("div");
            overlay.setAttribute("data-sb-overlay", sections[i].getAttribute("data-sb-id"));
            overlay.innerHTML = "Modifier";
            container.appendChild(overlay);
            overlay.style.top = yOffset + "px";
            overlay.style.left = sectionBox.left + "px";
            overlay.style.width = width + "px";
            overlay.style.height = height + "px";
            overlay.addEventListener("click", (function(section, offsetLeft, offsetTop, editWidth, editHeight) {
                return function(evt) {
                    setEditMode(section, evt.currentTarget, offsetLeft, offsetTop, editWidth, editHeight);
                };
            })(sections[i], sectionBox.left, yOffset, width, height));
        }
    }

    function childrenHeight(parentElt) {
        var height = 0, children = parentElt.querySelectorAll("*");
        for (var i = 0; i < children.length; i++) {
            var childHeight = children[i].clientHeight;
            if(childHeight > height) {
                height = childHeight;
            }
        }
        return height;
    }

    function submitForm(formElt, callback) {
        sendXmlHttpRequest(formElt.getAttribute("method").toUpperCase(), formElt.getAttribute("action"),
            new FormData(formElt))
    }

    function sendXmlHttpRequest(method, url, data, callback) {
        var req = new XMLHttpRequest(), param;
        if (callback) {
            req.onload = callback;
        } else {
            req.onload = function() {
                eval(req.responseText);
            }
        }

        if (method === 'GET') {
            var params = [];
            for(param in data ) {
                if (data.hasOwnProperty(param)) {
                    params.push(encodeURIComponent(param) + '=' + encodeURIComponent(data[param] || ""));
                }
            }
            req.open(method, url + '?' + params.join('&').replace(/%20/g, '+'));
            req.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            req.send();
        } else {
            if (data instanceof FormData) {
                formData = data;
            } else {
                var formData = new FormData();
                for (var key in data) {
                    if (data.hasOwnProperty(key)) {
                        formData.append(key, data[key]);
                    }
                }
            }

            req.open(method, url);
            req.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            var token = document.getElementsByName("csrf-token")[0].content;
            req.setRequestHeader('X-CSRF-Token', token);

            req.send(formData);
        }
    }
</script>
<%= yield :site_scripts %>
<%= yield :page_scripts %>
</body>
</html>
